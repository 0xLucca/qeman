#!/usr/bin/env bash
set -euo pipefail

# --- Config ---
ARCH="$(dpkg --print-architecture)"
USER_SHELL_RC="${HOME}/.bashrc"  # change to ~/.zshrc if needed

need_cmd() { command -v "$1" >/dev/null 2>&1; }
ensure_sudo() { [ "$EUID" -eq 0 ] || sudo -v; }
append_once() { local l="$1" f="$2"; grep -Fqs "$l" "$f" || printf '\n%s\n' "$l" >> "$f"; }

echo "==> Refreshing APT and essentials"
ensure_sudo
sudo apt-get update -y
sudo apt-get install -y curl wget ca-certificates gnupg lsb-release software-properties-common

#!/usr/bin/env bash
set -euo pipefail

ARCH="$(dpkg --print-architecture)"
USER_SHELL_RC="${HOME}/.zshrc"

need_cmd() { command -v "$1" >/dev/null 2>&1; }
ensure_sudo() { [ "$EUID" -eq 0 ] || sudo -v; }
append_once() { local l="$1" f="$2"; grep -Fqs "$l" "$f" || printf '\n%s\n' "$l" >> "$f"; }

echo "==> Refreshing APT and essentials"
ensure_sudo
sudo apt-get update -y
sudo apt-get install -y curl wget ca-certificates gnupg lsb-release software-properties-common

# ---------------- VS CODE ----------------
echo "==> Installing VS Code"
if ! apt-cache policy | grep -q "packages.microsoft.com/repos/code"; then
  wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/packages.microsoft.gpg >/dev/null
  echo "deb [arch=${ARCH} signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" \
    | sudo tee /etc/apt/sources.list.d/vscode.list >/dev/null
fi
sudo apt-get update -y
sudo apt-get install -y code

# ---------------- PYTHON + UV ----------------
echo "==> Installing Python (system) and uv"
sudo apt-get install -y python3 python3-venv python3-pip
curl -LsSf https://astral.sh/uv/install.sh | sh
append_once 'export PATH="$HOME/.local/bin:$PATH"' "$USER_SHELL_RC"
export PATH="$HOME/.local/bin:$PATH"
if need_cmd uv; then uv python install || true; fi

# ---------------- GO (latest) ----------------
echo "==> Installing Go (latest)"

# Fetch latest stable Go version (e.g. "go1.23.1")
LATEST_GO="$(curl -fsSL https://golang.org/VERSION?m=text | sed -n '1{s/\r$//;p;q}')"
GO_TARBALL="${LATEST_GO}.linux-${ARCH}.tar.gz"
TMP_GO="/tmp/${GO_TARBALL}"

echo "==> Downloading $LATEST_GO"
curl -sSL "https://go.dev/dl/${GO_TARBALL}" -o "${TMP_GO}"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "${TMP_GO}"
rm -f "${TMP_GO}"
append_once 'export PATH="/usr/local/go/bin:$PATH"' "$USER_SHELL_RC"
append_once 'export GOPATH="$HOME/go"' "$USER_SHELL_RC"
append_once 'export PATH="$GOPATH/bin:$PATH"' "$USER_SHELL_RC"

# ---------------- RUST ----------------
echo "==> Installing Rust (rustup + stable)"
if ! need_cmd rustup; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
fi
append_once 'source "$HOME/.cargo/env"' "$USER_SHELL_RC"

# ---------------- NVM + NODE ----------------
echo "==> Installing NVM and Node LTS"
if [ ! -d "$HOME/.nvm" ]; then
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
fi
append_once 'export NVM_DIR="$HOME/.nvm"' "$USER_SHELL_RC"
append_once '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' "$USER_SHELL_RC"
append_once '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' "$USER_SHELL_RC"
export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
nvm install --lts
nvm alias default lts/*

# ---------------- DOCKER (CE) ----------------
echo "==> Installing Docker Engine (CE) + Compose"
# Repo + key (idempotent)
if [ ! -f /etc/apt/keyrings/docker.gpg ]; then
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  sudo chmod a+r /etc/apt/keyrings/docker.gpg
fi
if [ ! -f /etc/apt/sources.list.d/docker.list ]; then
  echo "deb [arch=${ARCH} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo "$VERSION_CODENAME") stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
fi
sudo apt-get update -y || true
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || true

# Enable + start
sudo systemctl enable --now docker || true

# Allow running docker without sudo
if ! getent group docker >/dev/null; then
  sudo groupadd docker
fi
if ! id -nG "$USER" | tr ' ' '\n' | grep -qx docker; then
  echo "==> Adding $USER to docker group"
  sudo usermod -aG docker "$USER"
  # Try to activate group in current shell if possible (won't persist after script exits)
  if command -v newgrp >/dev/null 2>&1; then
    echo "==> Activating docker group in this shell (temporary)"
    newgrp docker <<'EOF'
docker version >/dev/null 2>&1 || true
EOF
  fi
fi

# ---------------- Summary ----------------
echo "==> Done."
echo "Open a NEW shell (or run: source \"$USER_SHELL_RC\") so PATH/group changes take effect."
echo
echo "Versions:"
echo "  - VS Code:  $(code --version | head -n1 || true)"
echo "  - Python:   $(python3 --version 2>/dev/null || true)"
echo "  - uv:       $(uv --version 2>/dev/null || true)"
echo "  - Go:       $(/usr/local/go/bin/go version 2>/dev/null || true)"
echo "  - Rust:     $(bash -lc 'source ~/.cargo/env && rustc --version' 2>/dev/null || true)"
echo "  - Node.js:  $(bash -lc 'export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; node --version' 2>/dev/null || true)"
echo "  - Docker:   $(docker --version 2>/dev/null || true) | Compose: $(docker compose version 2>/dev/null || true)"

